##find correlations between humann, metadata and metabolon data
##5/23/16

rm(list=ls())
library("Kendall")

setwd("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\China\\humann")

datadir = "C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\China\\"

metadata = read.table(paste(datadir, "metadata_cleaned11-2015.txt", sep=""), 
                      header=T, sep="\t", colClasses=c("numeric", "character", rep("numeric", 55)))
metabolon = read.table(paste(datadir, "MetabolonScaledImpData-transpose.txt", sep=""), 
                       header=T, sep="\t", colClasses=c("numeric", "character", rep("numeric", 337)))

##get sample ids to be the same -> convert to numeric
names(metabolon)[1] = "sampleID"
names(metabolon)[2] = "ruralUrban"

##function that runs the comparisons
##table = table to compare, splitCol = split point between datasets (last column in OTU dataset)
##name = name of output file, desc = table with descriptions of the KEGG data
runComparisons <- function(table, splitCol, name, desc) {
  namesKEGG <- vector()
  description <- vector()
  namesOther <- vector()
  r <- vector()
  pValues <- vector()
  kendallP <- vector()
  
  index <- 1
  
  pdf(paste("humann_model_", name, "_plots.pdf",sep=""))
  
  for( i in 6:splitCol )
  {
    if(sum(table[,i] >0 ) > nrow(table) /4 && length(unique(table[,i])) > 1)  #metabolon columns that are all equal mess up kendall
    {
      for ( j in (splitCol+1):ncol(table))
      {
        if(!all(table[,j]==1)) { #in metabolon table three columns give a warning on Kendall: WARNING: Error exit, tauk2. IFAULT =  12 -> these columns are all 1
          namesKEGG[index] <- names(table)[i]
          namesOther[index] <- names(table)[j]
          description[index] <- desc$NAME[desc$sampleID==namesKEGG[index]]
          
          r[index] <- cor( table[,i], table[,j], method="spearman")
          aLm <- lm(table[,i] ~ table[,j])
          pValues[index] <- anova(aLm)$"Pr(>F)"[1]
          kendallP[index] <- Kendall(table[,i], table[,j])$sl[1]
          
          if(! is.na(kendallP[index] ) & kendallP[index] < 0.05 ) 
          { 
            myText <- paste(namesKEGG[index], " vs. " ,namesOther[index] ,"\n", "p=" ,  
                             format(	pValues[index] , digits=3), "r=", 
                             format( r[index], digits=3), "kendall p=" , 
                             format( kendallP[index], digits=3)) 
            plot(table[,j],table[,i] , main=myText, pch=16, xlab=namesOther[index], ylab=namesKEGG[index],
                 col = ifelse(table$ruralUrban == "rural", "blue", "red"))
            abline(aLm)
          }
          
          index <- index + 1
        }
      }
    }
  }
  
  dev.off()
  dFrame <- data.frame(namesKEGG, description, namesOther,kendallP, pLM=pValues, r) 
  dFrame <- dFrame [order(dFrame$pLM),]
  dFrame$adjKendallP <-  p.adjust(dFrame$kendallP, method = "BH")
  dFrame$adjLMp<-  p.adjust(dFrame$pLM, method = "BH")
  
  write.table( file= paste("humann_model_", name, "_pValues.txt", sep=""), dFrame, row.names=FALSE, sep="\t")
}

levels = c("module", "pathway")

for(lev in levels) {
  print(lev)
  file = paste("humann_keggAsCol_log_", lev, ".txt", sep="")
  table = read.table(file, header=T, sep="\t")
  ncol = ncol(table)
  table = read.table(file, header=T, sep="\t", colClasses=c(rep("character", 2), rep("numeric", ncol-2)))
  
  desc = read.table(paste("humann_keggAsRow_", lev, ".txt", sep=""), sep="\t", quote="", 
                    header=T, stringsAsFactors = F)
  
  ##convert sample IDs to numeric like metadata and metabolon
  names = table$sampleID
  names = sub("A", "", names)
  table$sampleID = as.numeric(names)
  
  ##metadata vs OTU
  mrg.md = merge(table, metadata, by=c("sampleID", "ruralUrban"))
  print(" metadata")
  runComparisons(mrg.md, ncol, paste("metadata_v_", lev, sep=""), desc)
  
  ##metabolite dataset
  mrg.mb = merge(table, metabolon, by=c("sampleID", "ruralUrban"))
  print(" metabolite")
  runComparisons(mrg.mb, ncol, paste("metabolon_v_", lev, sep=""), desc)
}
