#!/usr/bin/env Rscript

##draw transmission and epidemiology trees for Broad with outbreaker
##repeat 100 times
##4/29/16

rm(list=ls())
setwd("/nobackup/afodor_research/kwinglee/cre/outbreaker")
# setwd("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\paper1_analysisMethods\\figures")

library(ape)
library(adegenet)
library(igraph)
library(RBGL)
library(Rgraphviz)
library(outbreaker)

max.dist = 11

##get data
all.data = read.table("AllDistances.txt", sep="\t", header=T, colClasses=c(rep("numeric", 4), "character", "character", rep("numeric", 16)))
meta = read.table("UNCCMetaData_Final_8-5-15.txt", sep="\t", header=T, colClasses = c("numeric", "numeric", rep("character", 7)))
strains = unique(c(all.data$xID, all.data$yID))
strains = strains[order(strains)] #here are only looking at those strains we have comparisons for all samples

##convert to distance matrices, given the data column distance
convertToDist <- function(file) {
  table = read.table(file, header=T, sep="\t", colClasses="numeric")
  colnames(table) = c("xGen", "yGen", "distance")
  dist = matrix(nrow=length(strains), ncol=length(strains))
  for(i in 1:length(strains)) {
    for(j in 1:length(strains)) {
      s1 = strains[i]
      s2 = strains[j]
      val = table$distance[(table$xGen==s1 & table$yGen==s2) | (table$yGen==s1 & table$xGen==s2)]
      if(length(val) == 0 & s1==s2) {
        val = 0
      } else if(length(val) == 0) {
        print(i)
        print(j)
        print("")
        val = NA
      }
      dist[i,j] = val
    }
  }
  return(dist)
}

##need to use original files because not all comparisons made it into AllDistances, but this weeds out missing strains
broad = convertToDist("distancesUpperTriangle.txt")
# broad = convertToDist("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\BroadTrees\\distancesUpperTriangle.txt")

##culture dates need to be rearranged to same order as strains (also removing strains not in analysis)
cult = rep(NA, length(strains))
for(i in 1:length(strains)) {
  for(j in 1:length(meta$SpecNumber)) {
    if(as.numeric(strains[i]) == meta$SpecNumber[j]) {
      cult[i] = meta$DeID_StudyCultureDate[j]
    }
  }
}
cultureDates = as.POSIXct("2008-01-01") + cult*24*60*60

##get encounter overlap
enc = read.table("encounterDaysOverlap.txt", header=T, sep="\t", colClasses="numeric")
names = c("Assembly Core Genome")

##function that given graphNEL returns the xy coordinates
getCoord<-function(graph) {
  ag = agopen(graph, name=names[a])
  nod = AgNode(ag) #most likely equivalent to attributes(plot)$AgNode
  n1 = nod[[1]]
  cent = getNodeXY(n1) #xy coordinates of the center
  xy = data.frame(x=cent$x, y=cent$y)
  for(i in 2:length(nod)) {
    cent = getNodeXY(nod[[i]])
    xy = rbind(xy, c(cent$x, cent$y))
  }
  return(xy)
}

##returns edge colors  for the given graph
##black if no evidence, orange if overlap between culture dates, pink if not between dates but before last culture date 
##if fixName is true, then the edges are the position in the list of strains, otherwise the edges are the strain names
getEdgeCol <- function(graph, fixName=T) {
  edges = as_ids(E(graph))
  edge.col = rep("black", length(edges))
  for(i in 1:length(edges)) {
    sp = strsplit(edges[i], "|", fixed=T)[[1]]
    x = as.numeric(sp[1])
    y = as.numeric(sp[2])
    if(fixName) {
      p = which((enc$xID==strains[x] & enc$yID==strains[y]) | 
                  (enc$xID==strains[y] & enc$yID==strains[x])) ##position in encounter data
    } else {
      p = which((enc$xID==x & enc$yID==y) | 
                  (enc$xID==y & enc$yID==x)) ##position in encounter data
    }
    if(enc$daysOverlapBetweenCultures[p] > 0) {
      edge.col[i] = "orange"
    } else if(enc$daysOverlapBeforeLastCulture[p] > 0) {
      edge.col[i] = "pink"
    }
  }
  return(edge.col)
}

##returns the node colors for the given list of groups
colors = c("white", "darkgreen","yellow", "salmon", "burlywood4", "blue", "grey", "orange", "lavender", "lemonchiffon", "honeydew", "hotpink", "navajowhite1", "olivedrab1", "plum2", "powderblue", "seashell1", "tan3")
cpos=1
##set some colors based on the groupings so can have consistent color scheme
setCol = c("cyan", "blueviolet", "royalblue", "red", "palegreen3")
setNodes = c(70, 14, 6, 36, 48)
names(setCol) = setNodes
getNodeCol <- function(groups) {
  col = rep(NA, length(groups))
  col[is.na(groups)] = "black" #NA
  ##preset groups
  for(i in 1:length(setCol)) {
    col[groups==groups[strains==setNodes[i]]] = setCol[i]
  }
  if(is.na(groups[strains==28])) { #28 is in its own group for cophylog and NC
    col[groups==groups[strains==28]] = "magenta"
  }
  if(is.na(groups[strains==38])) { #38 is part of the 36 group frequently so color similarly
    col[groups==groups[strains==38]] = "red4"
  }
  
  ##remaining groups
  g = unique(groups[is.na(col)])
  for(i in 1:length(g)) {
    col[groups==g[i]] = colors[cpos]
    cpos <<- cpos + 1
    if(cpos > length(colors)) {
      print("NEED MORE COLORS")
      cpos=1
    }
  }
  return(col)
}

#####
##outbreaker
##density function as exponential (taken from example)
w <- c(0,dexp(1:915, rate=1/5))
a=1 #analysis number
for(rep in 1:100) {
  d = broad
  
  ##get outbreaker figure
  print(paste("repetition", rep))
  res = outbreaker(dist.mat = d, dates=cultureDates, w.dens = w)
  
  ##fix distances to show up on plots
  res$D = as.dist(d)
  
  ##plot tree, clustered with edge betweenness
  tree = get.tTree(res)
  graph = plot(tree)
  all.graph = as_graphnel(graph)
  print(paste("Mean edge weights:", mean(tree$nb.mut[-15])))
  
  ##remove the edges with distance over max.dist
  edges = as_ids(E(graph))
 sub.ig = graph
  for(i in 1:length(edges)) {
    sp = strsplit(edges[i], "|", fixed=T)[[1]]
    x = as.numeric(sp[1])
    y = as.numeric(sp[2])
    weight = d[x,y]
    if(weight > max.dist[a]) {
      sub.ig = delete.edges(sub.ig, edges[i])
    }
  }
 
 sub.graph = as_graphnel(sub.ig)
 
 ##write results to table
 df = data.frame(isolate=strains, tree$idx, tree$collec.dates, tree$idx.dna, tree$ances, tree$inf.dates, 
                 tree$p.ances, tree$nb.mut, tree$n.gen, tree$p.gen)#, tree$inf.curves)
 write.table(df, paste("broad_outbreaker_rep", rep, ".txt", sep=""), sep="\t", quote=F, row.names = F, col.names = T)
  
  ##get the groups
  deg = degree(sub.graph)
  nodes = c(1:length(strains))
  roots = as.character(nodes[deg$inDegree == 0 & deg$outDegree > 0])
  subtrees = acc(sub.graph, roots)
  groups = rep(NA, length(strains))
  for(i in 1:length(subtrees)) {
    g = as.numeric(c(names(subtrees[i]), names(subtrees[[i]])))
    groups[nodes %in% g] = strains[as.numeric(names(subtrees[i]))]
  }
  
  ##get node colors
  col = getNodeCol(groups)
  
  #also need font color to be white for the black nodes
  font.col = rep("black", length(col))
  font.col[col=="black"] = "white"
  
  ##get edge colors; black if no evidence, orange if overlap between culture dates, pink if not between dates but before last culture date 
  edge.col = getEdgeCol(sub.ig)
  print(paste("Orange edges", sum(edge.col=="orange")))
  print(paste("Pink edges", sum(edge.col=="pink")))
  print(paste("Black edges", sum(edge.col=="black")))
  
  ##get graphNEL coordinates
  xy = getCoord(sub.graph)
  mat = cbind(xy$x, xy$y)
  
  ##draw figure normal way
  pdf(paste("broad_outbreaker_rep", rep, "_removeEdges.pdf", sep=""), height=30, width=30)
  par(mar=c(.1, .1, 2, .1), cex.main=3)
  plot(sub.ig, layout=mat, vertex.label=strains, vertex.color=col, vertex.label.color=font.col, vertex.label.cex=3.5, vertex.size=5.5,
       edge.label.cex=2, edge.color=edge.col, edge.width=4, edge.label.color="dodgerblue3", edge.arrow.size=1.5, 
       main=paste("Assembly core rep ", rep, ", Removed edges greater than ", round(max.dist[a], digits=1), " mutations", sep=""))
  dev.off()
  
  ##draw full tree
  xy = getCoord(all.graph)
  mat = cbind(xy$x, xy$y)
  edge.col = getEdgeCol(graph)
  print(paste("All orange edges", sum(edge.col=="orange")))
  print(paste("All pink edges", sum(edge.col=="pink")))
  print(paste("All black edges", sum(edge.col=="black")))
  pdf(paste("broad_outbreaker_rep", rep, "_allEdges.pdf", sep=""), height=30, width=30)
  par(mar=c(.1, .1, 2, .1), cex.main=3)
  plot(graph, layout=mat, vertex.label=strains, vertex.color=col, vertex.label.color=font.col, vertex.label.cex=4, vertex.size=6,
       edge.label.cex=1.5, edge.color=edge.col, edge.width=4, edge.label.color="dodgerblue3", edge.arrow.size=1.5, 
       main=paste("Assembly core rep ", rep))
  dev.off()
  
  print("")
}
