##figures for paper, with kmer distances
##Klebsiella only

rm(list=ls())
# setwd("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\paper1_analysisMethods\\figures")
# setwd("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\rbh\\kmer")
setwd("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\Klebsiella only")

##get list of kleb strains
genomes = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\rbh\\GenomeToClass.txt",
                     sep="\t", colClasses="character", header=T)
kleb = genomes$Genome[grepl("kleb", genomes$Genome) & grepl("carolina", genomes$Class)]
kleb = as.numeric(sub("klebsiella_pneumoniae_chs_", "", kleb))

#####ROC
##get culture date and facility
metadata = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\paper1_analysisMethods\\figures\\UNCCMetaData_Final_8-5-15.txt", header = T, sep="\t", colClasses=c("numeric", "numeric", rep("character", 7)))
metadata = metadata[metadata$SpecNumber %in% kleb,]
culture.data = data.frame(xID=numeric(), yID=numeric(), xCultureDate=numeric(), yCultureDate=numeric(), xCultureFacility=character(), yCultureFacility=character())
for(i in 1:(nrow(metadata)-1)) {
  for(j in (i+1):nrow(metadata)) {
    df = data.frame(xID = metadata$SpecNumber[i], yID = metadata$SpecNumber[j],
                    xCultureDate = metadata$DeID_StudyCultureDate[i], yCultureDate = metadata$DeID_StudyCultureDate[j],
                    xCultureFacility = metadata$Abstracted_StudyFacility[i], yCultureFacility = metadata$Abstracted_StudyFacility[j])
    culture.data = rbind(culture.data, df)
  }
}

###ROC setup
cultureDiff=abs(culture.data$xCultureDate-culture.data$yCultureDate)#differ in culture times
##make column where 0 = likely transmission, 1 is not (defined as <=14 days difference in culture dates)
trans = rep(1, length(cultureDiff))
trans[cultureDiff<=14]=0 #10
meta = cbind(culture.data, cultureDiff, transmissionCultureDiff=trans)
##transmission from encounter data: overlap in hospital > 0 days between culture dates
enc = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\paper1_analysisMethods\\figures\\encounterDaysOverlap.txt", sep="\t", header=T, colClasses="numeric")
enc = enc[enc$xID %in% kleb & enc$yID %in% kleb,]
meta = merge(meta, enc, by=c("xID", "yID"))
trans = rep(1, nrow(meta))
trans[meta$daysOverlapBetweenCultures>0]=0
meta = cbind(meta, transmissionOverlapBetweenCultures=trans)
##transmission from encounter data: overlap in hospital > 0 days before last culture date
trans = rep(1, nrow(meta))
trans[meta$daysOverlapBeforeLastCulture>0]=0
meta = cbind(meta, transmissionOverlapBeforeLastCulture=trans)

###make ROC
roc<-function(values) {
  x = rep(0, length(values)+1)
  y = rep(0, length(values)+1)
  for(i in 1:length(values)) {
    if(values[i]==0) {
      x[i+1] = x[i]
      y[i+1] = y[i] + 1
    } else {
      x[i+1] = x[i] + 1
      y[i+1] = y[i]
    }
  }
  return(data.frame(x=x/length(values[values==1]), y=y/length(values[values==0])))
}

##function that returns the ROC coordinates, based on the transmission given in column tr
getCoords<-function(allData, tr) {
  sort = allData[order(allData$distance),]
  trans = sort[,tr]
  return(roc(trans))
}

###get data
##broad
broad = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\BroadTrees\\distancesUpperTriangle.txt", header=T, sep="\t", colClasses="numeric")
names(broad) = c("xID", "yID", "distance")
broad = broad[broad$xID %in% kleb & broad$yID %in% kleb,]
broadROC = merge(meta, broad, by=c("xID", "yID"))

##plasmid analyses
myPlasmid90 = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\PlasmidDistance_90.0.txt", sep="\t", header=T, colClasses="numeric")
myPlasmid50 = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\PlasmidDistance_50.0.txt", sep="\t", header=T, colClasses="numeric")
names(myPlasmid90) = c("xID", "yID", "distance")
names(myPlasmid50) = c("xID", "yID", "distance")
myPlasmid90 = myPlasmid90[myPlasmid90$xID %in% kleb & myPlasmid90$yID %in% kleb,]
myPlasmid50 = myPlasmid50[myPlasmid50$xID %in% kleb & myPlasmid50$yID %in% kleb,]
plas90 = merge(meta, myPlasmid90, by=c("xID", "yID"))
plas50 = merge(meta, myPlasmid50, by=c("xID", "yID"))

##alignment analyses - snps
snpCP = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\PilonSNPDistanceNoIndel_CP006923.txt", sep="\t", header=T, colClasses="numeric")
snpNC = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\PilonSNPDistanceNoIndel_NC_009648.txt", sep="\t", header=T, colClasses="numeric")
names(snpCP) = c("xID", "yID", "distance")
names(snpNC) = c("xID", "yID", "distance")
snpCP = snpCP[snpCP$xID %in% kleb & snpCP$yID %in% kleb,]
snpNC = snpNC[snpNC$xID %in% kleb & snpNC$yID %in% kleb,]
cp = merge(meta, snpCP, by=c("xID", "yID"))
nc = merge(meta, snpNC, by=c("xID", "yID"))

##alignment analyses - indels
indelCP = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\PilonSNPDistanceIndel_CP006923.txt", sep="\t", header=T, colClasses="numeric")
indelNC = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\PilonSNPDistanceIndel_NC_009648.txt", sep="\t", header=T, colClasses="numeric")
names(indelCP) = c("xID", "yID", "distance")
names(indelNC) = c("xID", "yID", "distance")
indelCP = indelCP[indelCP$xID %in% kleb & indelCP$yID %in% kleb,]
indelNC = indelNC[indelNC$xID %in% kleb & indelNC$yID %in% kleb,]
icp = merge(meta, indelCP, by=c("xID", "yID"))
inc = merge(meta, indelNC, by=c("xID", "yID"))

##co-phylog
phy = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\CoPhylogSNPDistances.txt", sep="\t", header=T, colClasses="numeric")
names(phy) = c("xID", "yID", "distance")
x = phy$xID
y = phy$yID
x[phy$xID > phy$yID] = y[phy$xID > phy$yID]
y[phy$xID > phy$yID] = phy$xID[phy$xID > phy$yID]
phy$xID = x
phy$yID = y
phy = phy[phy$xID %in% kleb & phy$yID %in% kleb,]
ph = merge(meta, phy, by=c("xID", "yID"))

##kmer
kmer = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\rbh\\kmer\\kmerCHSDistance.txt", header=T, colClasses="numeric")
names(kmer) = c("xID", "yID", "distance")
kmer = kmer[kmer$xID %in% kleb & kmer$yID %in% kleb,]
km = merge(meta, kmer, by=c("xID", "yID"))

###function to generate ROC (small and zoomed) based on given transmission column (tr) in meta, write results to file with name name
generateROC <- function(tr, name) {
  broadCoord = getCoords(broadROC, tr)
  plas90Coord = getCoords(plas90, tr)
  cpCoord = getCoords(cp, tr)
  ncCoord = getCoords(nc, tr)
  phyCoord = getCoords(ph, tr)
  kmerCoord = getCoords(km, tr)
  
  ##permutations
  coord = roc(sample(meta[,tr], size=nrow(meta)))
  for(i in 2:1000) {
    permut = roc(sample(meta[,tr], size=nrow(meta)))
    coord = cbind(coord, permut)
  }
  
  ##set up graph (full graph)
  # tiff(filename=paste("DistanceFigROC_", name, ".tiff", sep=""), width=2400, height=800, res=300)
  jpeg(filename=paste("DistanceFigROC_", name, ".jpg", sep=""), width=2400, height=800, res=300)
  par(mfcol=c(1, 3), mar=c(4.1,4.1,3.1,1.1))
  plot(x=coord[,1], y=coord[,1], col="gray", xlab="specificity", ylab="sensitivity", type="l", xlim=c(0,1), ylim=c(0,1), main=paste(name, "\nAll Pairs", sep=""), cex=1.5)
  for(i in seq(3,1000,2)) {
    lines(x=coord[,i], y=coord[,i+1], col="gray")
  }
  lines(broadCoord$y~broadCoord$x, col="black")
  lines(cpCoord$y~cpCoord$x, col="green")
  lines(ncCoord$y~ncCoord$x, col="blue")
  lines(phyCoord$y~phyCoord$x, col="purple")
  lines(plas90Coord$y~plas90Coord$x, col="red")
  lines(kmerCoord$y~kmerCoord$x, col="orange")
  # text(x=0, y=max(coord[,1])-0.02, labels="A", cex=2)
  mtext("A", side=3, line=0.2, adj=0, cex=1.5)
  
  ##zoomed in graph (first n samples)
  n=500
  plot(x=coord[1:n,1], y=coord[1:n,1], col="gray", xlab="specificity", ylab="sensitivity", type="l", main=paste(name, "\n1st ", paste(n," pairs")), cex=1.5)
  for(i in seq(3,1000,2)) {
    lines(x=coord[1:n,i], y=coord[1:n,i+1], col="gray")
  }
  lines(broadCoord$y[1:n]~broadCoord$x[1:n], col="black")
  lines(cpCoord$y[1:n]~cpCoord$x[1:n], col="green")
  lines(ncCoord$y[1:n]~ncCoord$x[1:n], col="blue")
  lines(phyCoord$y[1:n]~phyCoord$x[1:n], col="purple")
  lines(plas90Coord$y[1:n]~plas90Coord$x[1:n], col="red")
  lines(kmerCoord$y[1:n]~kmerCoord$x[1:n], col="orange")
  # text(x=0, y=max(coord[1:n,1])-0.005, labels="B", cex=2)
  mtext("B", side=3, line=0.2, adj=0, cex=1.5)
  
  ##draw legend
  par(mar=c(4.1,0.5,3.1,1.1))
  plot(1, type="n", yaxt="n", xaxt="n", xlim=c(0,50), ylim=c(0,100), xlab="", ylab="", main="", bty="n")
  legend("topleft", c("Assembly Core Genome", "Co-phylog", "Aligned to CP006923", "Aligned to NC009648", "Plasmid presence/absence", "Kmer Cosine", "Permutation"),
         lty=1, col=c("black", "purple", "green", "blue", "red", "orange", "grey"), bty='n', cex=1)
  dev.off()
}

##make ROC figures for culture diff and encounter data (before and between)
generateROC(8, "Difference in Culture Dates")
generateROC(12, "Encounter Between Culture Dates")
generateROC(13, "Encounter Before Last Culture Date")

##########histograms, log scale
phy2 = phy[phy$xID!=phy$yID,] #cophylog analysis is the only one comparing to self; remove this from histogram

##log
lim = ceiling(max(log10(broad$distance + 1), log10(snpCP$distance + 1), log10(snpNC$distance + 1), log10(phy2$distance + 1), log10(myPlasmid90$distance + 1), log10(kmer$distance + 1)))
ymax = 1100
# tiff(filename="DistanceFigHistogramsLog.tiff", width=3000, height=2400, res=300)
jpeg(filename="DistanceFigHistogramsLog.jpg", width=3000, height=2400, res=300)
par(mfrow=c(3,2), mar=c(6.2, 5, 2.5, 0.9))
hist(x=log10(broad$distance + 1), main="", xlab="log10(Assembly Core Genome Distance + 1)", cex.lab=2, xlim=c(0, lim), ylim=c(0,ymax), cex.axis=2, breaks=seq(0, lim, by=.25)) #ylim determined by plotting without maximizing it and looking at graph with highest peak (CP)
mtext(" A", side=3, line=0.3, adj=0, cex=2)
hist(x=log10(phy2$distance + 1), main="", xlab="log10(Co-phylog + 1)", cex.lab=2, xlim=c(0, lim), ylim=c(0,ymax), cex.axis=2, breaks=seq(0, lim, by=.25))
mtext(" B", side=3, line=0.3, adj=0, cex=2)
hist(x=log10(snpCP$distance + 1), main="", xlab="log10(Aligned to CP006923 Distance + 1)", cex.lab=2, xlim=c(0, lim), ylim=c(0,ymax), cex.axis=2, breaks=seq(0, lim, by=.25))
mtext(" C", side=3, line=0.3, adj=0, cex=2)
hist(x=log10(snpNC$distance + 1), main="", xlab="log10(Aligned to NC009648 Distance + 1)", cex.lab=2, xlim=c(0, lim), ylim=c(0,ymax), cex.axis=2, breaks=seq(0, lim, by=.25))
mtext(" D", side=3, line=0.3, adj=0, cex=2)
hist(x=log10(myPlasmid90$distance + 1), main="", xlab="", cex.lab=2, xlim=c(0, lim), ylim=c(0,ymax), cex.axis=2, breaks=seq(0, lim, by=.25))
mtext("log10(Plasmid Presence/Absence\n Distances + 1)", side=1, line=4.5, cex=1.3)
mtext(" E", side=3, line=0.3, adj=0, cex=2)
hist(x=log10(kmer$distance+0.0001), main="", xlab="log10(Kmer Cosine Distance + 0.0001)", cex.lab=2, ylim=c(0,ymax), cex.axis=2)
mtext(" F", side=3, line=0.3, adj=0, cex=2)
dev.off()

##########method comparisons
##set up data set
names(broad)[3] = "broadCoreGenomeDistance"
any(broad$xID > broad$yID)
names(myPlasmid50)[3] = "plasmid50Distance"
any(myPlasmid50$xID > myPlasmid50$yID)
names(myPlasmid90)[3] = "plasmid90Distance"
any(myPlasmid90$xID > myPlasmid90$yID)
names(snpCP)[3] = "cpSNPDistance"
any(snpCP$xID > snpCP$yID)
names(snpNC)[3] = "ncSNPDistance"
any(snpNC$xID > snpNC$yID)
names(indelCP)[3] = "cpIndelDistance"
any(indelCP$xID > indelCP$yID)
names(indelNC)[3] = "ncIndelDistance"
any(indelNC$xID > indelNC$yID)
names(phy)[3] = "cophylogDistance"
any(phy$xID > phy$yID) #only one not in order with lower number as xID and higher as yID, but got fixed above
names(kmer)[3] = "kmerDistance"
any(kmer$xID > kmer$yID)

dist = merge(broad, myPlasmid50, by=c("xID", "yID"))
dist = merge(dist, myPlasmid90, by=c("xID", "yID"))
dist = merge(dist, snpCP, by=c("xID", "yID"))
dist = merge(dist, snpNC, by=c("xID", "yID"))
dist = merge(dist, indelCP, by=c("xID", "yID"))
dist = merge(dist, indelNC, by=c("xID", "yID"))
dist = merge(dist, phy, by=c("xID", "yID"))
dist = merge(dist, kmer, by=c("xID", "yID"))

##make graphs
##x = x values, y = y values, xlab = x axis label, ylab = y label
##leg = show line legend if true
graph<-function(x, y, xlab, ylab, leg) {
  plot(x=x, y=y, xlab=xlab, ylab="", cex.lab=2.5, cex.axis=2.5, pch=16)
  mtext(side=2, ylab, cex=2, line=3.5)
  abline(a=0, b=1, col="green", lwd=2.5)#identity line
  mod1 = lm(y~x)
  abline(mod1, col="blue", lwd=2.5)#linear model
  lab=paste("R^2=", round(summary(mod1)$r.squared,2), sep="")
  legend("bottomright", lab, text.col="blue", cex=3, bty="n")
  if(leg) {
    legend("topleft", c("Linear Regression Line", "Identity Line"),
           lty=1, col=c("blue", "green"), bty='n', cex=2.5, lwd=2.5)
  }
}

###main figure
##graph all comparisons on log scale
# tiff(filename="DistanceFigMethodComparisonsLog.tiff", width=6000, height=10000, res=300)
jpeg(filename="DistanceFigMethodComparisonsLog.jpg", width=6000, height=10000, res=300)
par(mfrow=c(5,3), mar=c(9, 9, .7, .7), mgp=c(5.5, 1, 0), oma=c(5,0,0,0)) #mgp=c(axis.title.position, axis.label.position, axis.line.position), oma=outer margin
graph(log10(dist$broadCoreGenomeDistance + 1), log10(dist$cophylogDistance + 1), "log10(Assembly Core Genome\n Distance + 1)", "log10(Co-phylog Distance + 1)", F)
graph(log10(dist$broadCoreGenomeDistance + 1), log10(dist$cpSNPDistance + 1), "log10(Assembly Core Genome\n Distance + 1)", "log10(Aligned to CP006923\n Distance + 1)", F)
graph(log10(dist$broadCoreGenomeDistance + 1), log10(dist$ncSNPDistance + 1), "log10(Assembly Core Genome\n Distance + 1)", "log10(Aligned to NC009648\n Distance + 1)", F)
graph(log10(dist$broadCoreGenomeDistance + 1), log10(dist$plasmid90Distance + 1), "log10(Assembly Core Genome\n Distance + 1)", "log10(Plasmid Presence/Absence\n Distance + 1)", F)
graph(log10(dist$broadCoreGenomeDistance + 1), dist$kmerDistance, "log10(Assembly Core Genome\n Distance + 1)", "Kmer Cosine Distance", F)
graph(log10(dist$cophylogDistance + 1), log10(dist$cpSNPDistance + 1), "log10(Co-Phylog Distance + 1)", "log10(Aligned to CP006923\n Distance + 1)", F)
graph(log10(dist$cophylogDistance + 1), log10(dist$ncSNPDistance + 1), "log10(Co-Phylog Distance + 1)", "log10(Aligned to NC009648\n Distance + 1)", F)
graph(log10(dist$cophylogDistance + 1), log10(dist$plasmid90Distance + 1), "log10(Co-Phylog Distance + 1)", "log10(Plasmid Presence/Absence\n Distance + 1)", F)
graph(log10(dist$cophylogDistance + 1), dist$kmerDistance, "log10(Co-Phylog Distance + 1)", "Kmer Cosine Distance", F)
graph(log10(dist$cpSNPDistance + 1), log10(dist$ncSNPDistance + 1), "log10(Aligned to CP006923\n Distance + 1)", "log10(Aligned to NC009648\n SNP Distance + 1)", F)
graph(log10(dist$cpSNPDistance + 1), log10(dist$plasmid90Distance + 1), "log10(Aligned to CP006923\n Distance + 1)", "log10(Plasmid Presence/Absence\n Distance + 1)", F)
graph(log10(dist$cpSNPDistance + 1), dist$kmerDistance, "log10(Aligned to CP006923\n Distance + 1)", "Kmer Cosine Distance", F)
graph(log10(dist$ncSNPDistance + 1), log10(dist$plasmid90Distance + 1), "log10(Aligned to NC009648\n Distance + 1)", "log10(Plasmid Presence/Absence\n Distance + 1)", F)
graph(log10(dist$ncSNPDistance + 1), dist$kmerDistance, "log10(Aligned to NC009648\n Distance + 1)", "Kmer Cosine Distance", F)
graph(log10(dist$plasmid90Distance + 1), dist$kmerDistance, "log10(Plasmid Presence/Absence\n Distance + 1)", "Kmer Cosine Distance", F)
##add legend (as bottom of larger graph overlapping everything)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("                  Legend:", "Linear Regression Line      ", "Identity Line"), xpd = TRUE, horiz = TRUE, inset = c(0,0), 
       lty=1, col=c("white", "blue", "green"), cex=3, lwd=2.5)
dev.off()

##plasmid50 comparisons, log scale
# tiff(filename="DistanceFigSuppMethodComparisonsLog_plasmid50.tiff", width=6000, height=4000, res=300)
jpeg(filename="DistanceFigSuppMethodComparisonsLog_plasmid50.jpg", width=6000, height=4000, res=300)
par(mfrow=c(2,3), mar=c(9, 9, .7, .7), mgp=c(5.5, 1, 0), oma=c(5,0,0,0)) #mgp=c(axis.title.position, axis.label.position, axis.line.position)
graph(log10(dist$plasmid50Distance + 1), log10(dist$broadCoreGenomeDistance + 1), "log10(Plasmid 50% Cutoff Distance + 1)", "log10(Assembly Core Genome\n Distance + 1)", F)
graph(log10(dist$plasmid50Distance + 1), log10(dist$cpSNPDistance + 1), "log10(Plasmid 50% Cutoff Distance + 1)",  "log10(Aligned to CP006923\n Distance + 1)", F)
graph(log10(dist$plasmid50Distance + 1), log10(dist$ncSNPDistance + 1), "log10(Plasmid 50% Cutoff Distance + 1)","log10(Aligned to NC009648\n Distance + 1)", F)
graph(log10(dist$plasmid50Distance + 1), log10(dist$cophylogDistance + 1), "log10(Plasmid 50% Cutoff Distance + 1)", "log10(Co-Phylog Distance + 1)", F)
graph(log10(dist$plasmid50Distance + 1), log10(dist$plasmid90Distance + 1), "log10(Plasmid 50% Cutoff Distance + 1)", "log10(Plasmid 90% Cutoff\n Distance + 1)", F)
graph(log10(dist$plasmid50Distance + 1), dist$kmerDistance, "log10(Plasmid 50% Cutoff Distance + 1)", "Kmer Cosine Distance", F)
##add legend (as bottom of larger graph overlapping everything)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("                  Legend:", "Linear Regression Line      ", "Identity Line"), xpd = TRUE, horiz = TRUE, inset = c(0,0), 
       lty=1, col=c("white", "blue", "green"), cex=3, lwd=2.5)
dev.off()

##indel comparisons, log scale
# tiff(filename="DistanceFigSuppMethodComparisonsLog_indel.tiff", width=8000, height=6000, res=300)
jpeg(filename="DistanceFigSuppMethodComparisonsLog_indel.jpg", width=10000, height=6000, res=300)
par(mfrow=c(3,5), mar=c(9, 9, .7, .7), mgp=c(5.5, 1, 0))
graph(log10(dist$cpIndelDistance + 1), log10(dist$broadCoreGenomeDistance + 1), "log10(Aligned to CP006923 Indel \nDistance + 1)", "log10(Assembly Core Genome \nDistance + 1)", F)
graph(log10(dist$cpIndelDistance + 1), log10(dist$cophylogDistance + 1), "log10(Aligned to CP006923 Indel \nDistance + 1)", "log10(Co-Phylog Distance + 1)", F)
graph(log10(dist$cpIndelDistance + 1), log10(dist$cpSNPDistance + 1), "log10(Aligned to CP006923 Indel \nDistance + 1)", "log10(Aligned to CP006923 SNP \nDistance + 1)", F)
graph(log10(dist$cpIndelDistance + 1), log10(dist$ncSNPDistance + 1), "log10(Aligned to CP006923 Indel \nDistance + 1)", "log10(Aligned to NC009648 SNP \nDistance + 1)", F)
graph(log10(dist$cpIndelDistance + 1), log10(dist$plasmid90Distance + 1), "log10(Aligned to CP006923 Indel \nDistance + 1)", "log10(Plasmid Presence/Absence \nDistance + 1)", F)
graph(log10(dist$cpIndelDistance + 1), log10(dist$ncIndelDistance + 1), "log10(Aligned to CP006923 Indel \nDistance + 1)", "log10(Aligned to NC009648 Indel \nDistance + 1)", F)
graph(log10(dist$cpIndelDistance + 1), dist$kmerDistance, "log10(Aligned to CP006923 Indel \nDistance + 1)", "Kmer Cosine Distance", F)
graph(log10(dist$ncIndelDistance + 1), log10(dist$broadCoreGenomeDistance + 1), "log10(Aligned to NC009648 Indel \nDistance + 1)", "log10(Assembly Core Genome \nDistance + 1)", F)
graph(log10(dist$ncIndelDistance + 1), log10(dist$cophylogDistance + 1), "log10(Aligned to NC009648 Indel \nDistance + 1)", "log10(Co-Phylog Distance + 1)", F)
graph(log10(dist$ncIndelDistance + 1), log10(dist$cpSNPDistance + 1), "log10(Aligned to NC009648 Indel \nDistance + 1)", "log10(Aligned to CP006923 SNP \nDistance + 1)", F)
graph(log10(dist$ncIndelDistance + 1), log10(dist$ncSNPDistance + 1), "log10(Aligned to NC009648 Indel \nDistance + 1)", "log10(Aligned to NC009648 SNP \nDistance + 1)", F)
graph(log10(dist$ncIndelDistance + 1), log10(dist$plasmid90Distance + 1), "log10(Aligned to NC009648 Indel \nDistance + 1)", "log10(Plasmid Presence/Absence \nDistance + 1)", F)
graph(log10(dist$ncIndelDistance + 1), dist$kmerDistance, "log10(Aligned to NC009648 Indel \nDistance + 1)", "Kmer Cosine Distance", F)
##add legend 
plot(1, type="n", yaxt="n", xaxt="n", xlim=c(0,50), ylim=c(0,100), xlab="", ylab="", main="", bty="n")
legend("topleft", c("Legend:", "Linear Regression Line", "Identity Line"),
       lty=1, col=c("white", "blue", "green"), bty='n', cex=3)
dev.off()

############graph against time
any(meta$xID > meta$yID)
dist = merge(meta, dist, by=c("xID", "yID"))

##function to draw distance vs. time for the given distance, name file with given name, use given y label
dVsT <- function(distance, name, ylab) {
  # tiff(filename=paste("DistanceFigDistanceVsTimeLog_", name, ".tiff", sep=""), width=4000, height=6000, res=300)
  jpeg(filename=paste("DistanceFigDistanceVsTimeLog_", name, ".jpg", sep=""), width=4000, height=6000, res=300)
  par(mfrow=c(3, 2), mar=c(9, 9.5, 4, .7), mgp=c(7, 2, 0))
  plot(x=log10(dist$broadCoreGenomeDistance + 1), y=log10(distance + 1), xlab="log10(Assembly Core Genome\n Distance + 1)", ylab=ylab, cex.lab=3, cex.axis=3, pch=16)
  mtext("A", side=3, line=0.3, adj=0, cex=3)
  plot(x=log10(dist$cophylogDistance + 1), y=log10(distance + 1), xlab="log10(Co-Phylog Distance + 1)", ylab=ylab, cex.lab=3, cex.axis=3, pch=16)
  mtext("B", side=3, line=0.3, adj=0, cex=3)
  plot(x=log10(dist$cpSNPDistance + 1), y=log10(distance + 1), xlab="log10(Aligned to CP006923\n Distance + 1)", ylab=ylab, cex.lab=3, cex.axis=3, pch=16)
  mtext("C", side=3, line=0.3, adj=0, cex=3)
  plot(x=log10(dist$ncSNPDistance + 1), y=log10(distance + 1), xlab="log10(Aligned to NC009648\n Distance + 1)", ylab=ylab, cex.lab=3, cex.axis=3, pch=16)
  mtext("D", side=3, line=0.3, adj=0, cex=3)
  plot(x=log10(dist$plasmid90Distance + 1), y=log10(distance + 1), xlab="log10(Plasmid Presence/Absence\n Distance + 1)", ylab=ylab, cex.lab=3, cex.axis=3, pch=16)
  mtext("E", side=3, line=0.3, adj=0, cex=3)
  plot(x=dist$kmerDistance, y=log10(distance + 1), xlab="Kmer Cosine Distance", ylab=ylab, cex.lab=3, cex.axis=3, pch=16)
  mtext("F", side=3, line=0.3, adj=0, cex=3)
  dev.off()
}

##culture diff
dVsT(dist$cultureDiff, "cultureDiff", "log10(time between cultures + 1)")
##encounters - between culture dates
dVsT(dist$daysOverlapBetweenCultures, "encounterBetweenCultureDates", "log10(encounter days between cultures + 1)")
##encounters - before last culture date
dVsT(dist$daysOverlapBeforeLastCulture, "encounterBeforeLastCultureDate", "log10(encounter days before last culture + 1)")

############Co-phylog analysis
con = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\CoPhylogContextSummaryTable.txt", header=T, sep="\t", colClasses="numeric")
names(con)[1] = "xID"
names(con)[2] = "yID"
any(con$xID > con$yID)
x = con$xID
y = con$yID
x[con$xID > con$yID] = y[con$xID > con$yID]
y[con$xID > con$yID] = con$xID[con$xID > con$yID]
con$xID = x
con$yID = y
cop = merge(phy, con, by=c("xID", "yID"))

# tiff(filename="DistanceFigSuppCophylogLog.tiff", width=2000, height=1600, res=300)
# par(mar=c(5.1, 4.1, 1.1, 1.1))
# plot(x=log10(cop$cophylogDistance + 1), y=cop$ProportionShared, xlab="log10(Co-Phylog SNP Distance + 1)", ylab="Proportion Shared Contexts", pch=16)
# dev.off()

############Make distance table
dist = merge(dist, data.frame(xID=con$xID, yID=con$yID, proportionSharedContexts=con$ProportionShared), by=c("xID", "yID"))
write.table(dist, "AllDistances_klebOnly.txt", sep="\t", row.names=F, col.names=T, quote=F)
