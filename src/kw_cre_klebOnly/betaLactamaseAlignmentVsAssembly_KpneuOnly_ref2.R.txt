##compare numbers from aligning reads to betalactamases with bwa vs
##blasting assembly against cards database
##Kleb pneu only
##use second set of references; and compare to first numbers
##7/19/16

rm(list=ls())

setwd("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE")

assembly = read.table("numberOfBetaLactamaseGenes.txt", header=T, sep="\t", 
                      colClasses=c("character", rep("numeric", 78)))
names(assembly) = sub("X", "", names(assembly))
align = read.table("betaLactamaseAlignmentStatsByCHS_ref2.txt", header=T, sep="\t",
                   colClasses = c("character", "numeric", "character", rep("numeric", 4)))
betalactamases = c("KPC", "OKP", "OXA", "SHV", "TEM", "all")
align$aveDepthPerBPperMilReads = align$aveDepth / (align$totReads / 1000000) #average depth (depth per base pair) divided by (total reads divided by 1 million)

meta = read.table("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\CRE\\paper1_analysisMethods\\figures\\UNCCMetaData_Final_8-5-15.txt", 
                  sep="\t", header=T, colClasses = c("numeric", "numeric", rep("character", 7)))
kpneu = meta$SpecNumber[meta$Genus=="Kleb" & meta$Species=="pneumo"]

##combine results for the given beta lactamase
combine <- function(bl) {
  dfass = data.frame(chs = names(assembly)[-(1:3)],
                     numGenes = as.numeric(assembly[assembly$cardsGene==bl,-(1:3)]),
                     stringsAsFactors = F)
  al = align[grepl(bl, align$reference),]
  dfal = data.frame(chs = al$chs,
                    aveDepthPerBPperMilReads = al$aveDepthPerBPperMilReads,
                    stringsAsFactors = F)
  mrg = merge(dfass, dfal, by="chs")
  mrg$betaLactamase = bl
  mrg = mrg[mrg$chs %in% kpneu,]
  return(mrg)
}
kpc = combine("KPC")
okp = combine("OKP")
oxa = combine("OXA")
shv = combine("SHV")
tem = combine("TEM")
all = rbind(kpc, okp, oxa, shv, tem)
write.table(all, "betaLactamaseAlignmentVsAssembly_KpneuOnly_ref2.txt", row.names = F, col.names = T, sep="\t", quote=F)
tables = list(kpc, okp, oxa, shv, tem, all)

##color plots by betalactamase -> return the unique color for the given betalactamase
getColor <- function(bl) {
  if(bl == "KPC") {
    return("red")
  } else if(bl == "LEN" || bl == "OKP") {
    return("blue")
  } else if(bl == "OXA") {
    return("black")
  } else if(bl == "SHV") {
    return("gold")
  } else if(bl == "TEM") {
    return("purple")
  } else {
    warning(paste("invalid beta lactamase:", bl))
    return("gray")
  }
}


##boxplot and stats
jpeg("betaLactamaseAlignmentVsAssembly_KpneuOnly_boxplots_ref2.jpg", height=1400, width=2100, res=200)
par(mfrow = c(2,3))
box = data.frame(gene = betalactamases, p = rep(NA, length(betalactamases)))
for(i in 1:length(tables)) {
  bl = betalactamases[i]
  table = tables[[i]]
  x = factor(table$numGenes)
  y = table$aveDepthPerBPperMilReads
  col = sapply(table$betaLactamase, getColor, USE.NAMES = F)
  p = anova(lm(y~x))$`Pr(>F)`[1]
  box$p[i] = p
  boxplot(y~x, 
          
          main=paste(bl, "; p = ", format(p, digits=3), sep=""), 
          xlab = "number of genes identified in assembly",
          ylab = "alignment depth per base pair per million reads")
  points(y~x, pch=16, col=col)
}
dev.off()
box$pAdj = p.adjust(box$p, method="BH")
write.table(box, "betaLactamaseAlignmentVsAssembly_KpneuOnly_pValues_boxplots_ref2.txt",
            row.names = F, col.names = T, quote=F, sep="\t")

##scatterplot and stats
jpeg("betaLactamaseAlignmentVsAssembly_KpneuOnly_scatterplots_ref2.jpg", height=1400, width=2100, res=200)
par(mfrow = c(2,3))
scatter = data.frame(gene = betalactamases, p = rep(NA, length(betalactamases)))
for(i in 1:length(tables)) {
  bl = betalactamases[i]
  table = tables[[i]]
  x = table$numGenes
  y = table$aveDepthPerBPperMilReads
  col = sapply(table$betaLactamase, getColor, USE.NAMES = F)
  spear = cor(x=x, y=y, method = "spearman")
  p = anova(lm(y~x))$`Pr(>F)`[1]
  scatter$p[i] = p
  plot(y~jitter(x, amount=0.05), 
          main=paste(bl, "; p = ", format(p, digits=3), "; Spearman = ", 
                     format(spear, digits=3), sep=""), 
          xlab = "number of genes identified in assembly",
          ylab = "alignment depth per base pair per million reads",
          pch = 16, col=col,
       xlim = c(0, max(x)))
}
dev.off()
scatter$pAdj = p.adjust(scatter$p, method="BH")
write.table(scatter, "betaLactamaseAlignmentVsAssembly_KpneuOnly_pValues_scatterplots_ref2.txt",
            row.names = F, col.names = T, quote=F, sep="\t")

##note: LEN had much smaller values; OKP doesn't
mean(align$numMappedReads[grep("OKP", align$reference)]) #[1] 21.0125

####compare to first set of alignments
align1 = read.table("betaLactamaseAlignmentStatsByCHS.txt", header=T, sep="\t",
                   colClasses = c("character", "numeric", "character", rep("numeric", 4)))
align1$aveDepthPerBPperMilReads = align1$aveDepth / (align1$totReads / 1000000)
pdf("betaLactamaseAlignmentReferenceComparison.pdf", height=5, width=15)
par(mfrow=c(1,3))
for(i in 1:(length(betalactamases)-1)) {
  bl = betalactamases[i]
  ref2 = align[grepl(bl, align$reference),]
  if(bl == "OKP") {
    bl = "LEN"
  }
  ref1 = align1[grepl(bl, align1$reference),]
  if(bl == "LEN") {
    bl = "LEN/OKP"
  }
  mrg = merge(ref1, ref2, by="chs")
  ##plot proportion of reads
  plot(mrg$propMappedRead.x, mrg$propMappedRead.y, pch=16, main = paste("proportion of reads mapped to", bl),
       xlab = "reference 1 proportion mapped reads",
       ylab = "reference 2 proportion mapped reads")
  ##plot depth
  plot(mrg$aveDepth.x, mrg$aveDepth.y, pch=16, main = paste("average depth of alignment to", bl),
       xlab = "reference 1 average depth",
       ylab = "reference 2 average depth")
  ##plot depth per base pair per million reads
  plot(mrg$aveDepthPerBPperMilReads.x, mrg$aveDepthPerBPperMilReads.y, pch=16, 
       main = paste("depth per base pair per million reads aligned to", bl),
       xlab = "reference 1 depth per base pair per million reads",
       ylab = "reference 2 depth per base pair per million reads")
}
dev.off()