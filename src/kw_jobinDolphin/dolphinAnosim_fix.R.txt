##Perform ANOSIM to get R from dolphin data
##7/21/16

rm(list=ls())

library(vegan)

setwd("C:\\Users\\kwinglee.cb3614tscr32wlt\\Documents\\Fodor\\JobinCollaboration\\dolphin\\corrected metadata rdp abunotu")

##function that returns statistic and significance from anosim for two groups
getAnosimResults <- function(group1, group2) {
  an = anosim(table[table$BODY.SITE.SAMPLED==group1 | table$BODY.SITE.SAMPLED==group2,-(1:13)], 
              table$BODY.SITE.SAMPLED[table$BODY.SITE.SAMPLED==group1 | table$BODY.SITE.SAMPLED==group2])
  return(c(an$statistic, an$signif))
}

taxaLevels = c("phylum", "class", "order", "family", "genus", "OTU")
numNumericCols = c(36, 62, 92, 211, 672, 28973) #number of numeric columns, including number of reads

res = vector()
for(t in 1:length(taxaLevels)) {
  taxa = taxaLevels[t]
  print(taxa)
  fname = paste("dolphin_", taxa, "_logNorm.txt", sep="")
  table = read.table(fname, sep="\t", header=T, 
                     colClasses=c(rep("character",12), rep("numeric", numNumericCols[t])))
  
  ##results vector or r and p for each comparison
  an.res = vector()
  
  ##comparisons to a
  an.res = c(an.res, taxa, getAnosimResults("A", "B"))
  an.res = c(an.res, getAnosimResults("A", "C"))
  an.res = c(an.res, getAnosimResults("A", "D"))
  an.res = c(an.res, getAnosimResults("A", "E"))
  an.res = c(an.res, getAnosimResults("A", "F"))
  an.res = c(an.res, getAnosimResults("A", "W"))
  ##comparisons to b
  an.res = c(an.res, getAnosimResults("B", "C"))
  an.res = c(an.res, getAnosimResults("B", "D"))
  an.res = c(an.res, getAnosimResults("B", "E"))
  an.res = c(an.res, getAnosimResults("B", "F"))
  an.res = c(an.res, getAnosimResults("B", "W"))
  ##comparisons to c
  an.res = c(an.res, getAnosimResults("C", "D"))
  an.res = c(an.res, getAnosimResults("C", "E"))
  an.res = c(an.res, getAnosimResults("C", "F"))
  an.res = c(an.res, getAnosimResults("C", "W"))
  ##comparisons to d
  an.res = c(an.res, getAnosimResults("D", "E"))
  an.res = c(an.res, getAnosimResults("D", "F"))
  an.res = c(an.res, getAnosimResults("D", "W"))
  ##comparisons to e
  an.res = c(an.res, getAnosimResults("E", "F"))
  an.res = c(an.res, getAnosimResults("E", "W"))
  ##comparisons to f
  an.res = c(an.res, getAnosimResults("F", "W"))
  
  
  res = rbind(res, an.res)
}
results = as.data.frame(res, stringsAsFactors=F)
##fix names
names(results) = c("level", 
               "ab.r", "ab.p", "ac.r", "ac.p", "ad.r", "ad.p",
               "ae.r", "ae.p", "af.r", "af.p", "aw.r", "aw.p",
               "bc.r", "bc.p", "bd.r", "bd.p", "be.r", "be.p",
               "bf.r", "bf.p", "bw.r", "bw.p", "cd.r", "cd.p",
               "ce.r", "ce.p", "cf.r", "cf.p", "cw.r", "cw.p",
               "de.r", "de.p", "df.r", "df.p", "dw.r", "dw.p",
               "ef.r", "ef.p", "ew.r", "ew.p", "fw.r", "fw.p")

##p value correction
p = c(res[,3], res[,5], res[,7], res[,9],res[,11],
               res[,13], res[,15], res[,17], res[,19], res[,21],
               res[,23], res[,25], res[,27], res[,29], res[,31],
               res[,33], res[,35], res[,37], res[,39], res[,41],
               res[,43])
p = as.numeric(p)
pAdj = p.adjust(p, method="BH")
#a
results$pAdjAB = pAdj[1:6]
results$pAdjAC = pAdj[7:12]
results$pAdjAD = pAdj[13:18]
results$pAdjAE = pAdj[19:24]
results$pAdjAF = pAdj[25:30]
results$pAdjAW = pAdj[31:36]
#b
results$pAdjBC = pAdj[37:42]
results$pAdjBD = pAdj[43:48]
results$pAdjBE = pAdj[49:54]
results$pAdjBF = pAdj[55:60]
results$pAdjBW = pAdj[61:66]
#c
results$pAdjCD = pAdj[67:72]
results$pAdjCE = pAdj[73:78]
results$pAdjCF = pAdj[79:84]
results$pAdjCW = pAdj[85:90]
#d
results$pAdjDE = pAdj[91:96]
results$pAdjDF = pAdj[97:102]
results$pAdjDW = pAdj[103:108]
#e
results$pAdjEF = pAdj[109:114]
results$pAdjEW = pAdj[115:120]
#f
results$pAdjFW = pAdj[121:126]

write.table(results, "dolphinAnosim.txt", sep="\t", quote=F, row.names=F, col.names=T)
